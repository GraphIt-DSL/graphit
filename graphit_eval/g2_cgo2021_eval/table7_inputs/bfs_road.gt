element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const parent : vector{Vertex}(int) = -1;


func updateEdge(src : Vertex, dst : Vertex)
    parent[dst] = src;
end

func toFilter(v : Vertex) -> output : bool
    output =  parent[v] == -1;
end

func reset(v: Vertex)
    parent[v] = -1;
end

func main()
    for trail in 0:10
    	var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);
	startTimer();
        vertices.apply(reset);
	var start_vertex : int = atoi(argv[2]);
    	frontier.addVertex(start_vertex);
    	parent[start_vertex] = start_vertex;

    	#s0# while (frontier.getVertexSetSize() != 0)
            #s1# var output : vertexset{Vertex} = edges.from(frontier).to(toFilter).applyModified(updateEdge,parent, true);
	    delete frontier;
	    frontier = output;
    	end
        var elapsed_time : float = stopTimer();
	delete frontier;
    	print elapsed_time;
    end
end

% specify schedules here or use a separate schedule file
schedule:
	SimpleGPUSchedule s1;
	s1.configDeduplication(DISABLED);
	s1.configLoadBalance(TWCE);
	s1.configDirection(PUSH);
	s1.configFrontierCreation(FUSED);


	program->applyGPUSchedule("s0:s1", s1);


	SimpleGPUSchedule s0;
	s0.configKernelFusion(ENABLED);
	program->applyGPUSchedule("s0", s0);
