element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex,Vertex, int) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const dist : vector{Vertex}(int) = 2147483647; %should be INT_MAX
const pq: priority_queue{Vertex}(int);

func updateEdge(src : Vertex, dst : Vertex, weight : int)
    var new_dist : int = dist[src] + weight;
    pq.updatePriorityMin(dst, dist[dst], new_dist);
end

func printDist(v : Vertex)
    print dist[v];
end

func reset(v: Vertex)
    dist[v] = 2147483647;
end

func main()
    for trail in 0:10
        var start_vertex : int = atoi(argv[2]);
        pq = new priority_queue{Vertex}(int)(false, false, dist, 1, 2, false, start_vertex);
        startTimer();
        vertices.apply(reset);
        dist[start_vertex] = 0;
        #s0# while (pq.finished() == false)
            var frontier : vertexset{Vertex} = pq.dequeue_ready_set(); % dequeue lowest priority nodes
            #s1# edges.from(frontier).applyUpdatePriority(updateEdge);
            delete frontier;
        end
        var elapsed_time : float = stopTimer();
        print elapsed_time;
	delete pq;
    end
end


schedule:
	SimpleGPUSchedule s1;
	s1.configLoadBalance(TWCE);
	s1.configFrontierCreation(UNFUSED_BOOLMAP);
	s1.configDelta("argv[3]");
	program->applyGPUSchedule("s0:s1", s1);
